%% DES加密函数，包含置换等步骤
function DESCode = DESCoding(text, KeyN)
    % 明文初始置换IP，得到L0和R0
    IP = [58, 60, 62, 64, 57, 59, 61, 63; ...
    50, 52, 54, 56, 49, 51, 53, 55; ...
    42, 44, 46, 48, 41, 43, 45, 47; ...
    34, 36, 38, 40, 33, 35, 37, 39; ...
    26, 28, 30, 32, 25, 27, 29, 31; ...
    18, 20, 22, 24, 17, 19, 21, 23; ...
    10, 12, 14, 16,  9, 11, 13, 15; ...
    2,  4,  6,  8,  1,  3,  5,  7];

    M_IP = reshape(text(IP), 64, 1);

    L = M_IP(1: 32);
    R = M_IP(33: 64);
    for times = 1: 16
        [L, R] = Encrypt(KeyN(:, times), L, R);
    end

    % 最终置换
    tmp = [R; L];

    IPEnd = [40; 8; 48; 16; 56; 24; 64; 32;  ...
        39; 7; 47; 15; 55; 23; 63; 31;  ...
        38; 6; 46; 14; 54; 22; 62; 30;  ...
        37; 5; 45; 13; 53; 21; 61; 29;  ...
        36; 4; 44; 12; 52; 20; 60; 28;  ...
        35; 3; 43; 11; 51; 19; 59; 27;  ...
        34; 2; 42; 10; 50; 18; 58; 26;  ...
        33; 1; 41; 9; 49; 17; 57; 25];
    DESCode = tmp(IPEnd);
end

%% 最终LR两路加密步骤，需要迭代16次
function [L, R] = Encrypt(Key, L0, R0)
    % E盒扩展32->48，并异或运算
    tmp = 1: 32;
    tmp = reshape(tmp, 4, 8);
    rept1 = [32, 4: 4: 28];
    rept2 = [5: 4: 29, 1];
    E = reshape([rept1; tmp; rept2], 48, 1);

    R_E = R0(E);

    RE_XOR = xor(R_E, Key);

    % S盒压缩48->32
    S1 = [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7;
        0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8;
        4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0;
        15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13];
    S2 = [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10;
        3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5;
        0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15;
        13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9];
    S3 = [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8;
        13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1;
        13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7;
        1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12];
    S4 = [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15;
        13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9;
        10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4;
        3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14];
    S5 = [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9;
        14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6;
        4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14;
        11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3];
    S6 = [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11;
        10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8;
        9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6;
        4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13];
    S7 = [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1;
        13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6;
        1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2;
        6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12];
    S8 = [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7;
        1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2;
        7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8;
        2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11];

    S = [S1; S2; S3; S4; S5; S6; S7; S8];

    tmpR = reshape(RE_XOR, 6, 8);
    rowR = [tmpR(1, :); tmpR(6, :)];
    colR = tmpR(2: 5, :);

    weightRow = [2, 1];
    weightCol = [8, 4, 2, 1];

    rowR = (0: 7)*4 + weightRow * rowR + 1;
    colR = weightCol * colR + 1;

    R_S = zeros(4, 8, 'double');

    for index = 1: 8
        tmp = S(rowR(index), colR(index));
        R_S(: , index) = de2bi(tmp, 4, 'left-msb');
    end

    % P盒置换
    P = [16; 7; 20; 21; 29; 12; 28; 17; ...
        1; 15; 23; 26; 5; 18; 31; 10; ...
        2; 8; 24; 14; 32; 27; 3; 9; ...
        19; 13; 30; 6; 22; 11; 4; 25];

    R_P = R_S(P);

    L = R0;
    R = xor(L0, R_P);
end
